import os
import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, MessageHandler, filters, ConversationHandler

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO)
logger = logging.getLogger(__name__)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –¥–∏–∞–ª–æ–≥–∞
BUSINESS_NAME, BUSINESS_TYPE, AUTOMATION_GOAL, CONTACT_INFO = range(4)

# ========== –ì–õ–ê–í–ù–û–ï –ú–ï–ù–Æ ==========
async def start(update: Update, context):
    keyboard = [
        [InlineKeyboardButton("ü§ñ –î–µ–º–æ-–±–æ—Ç –¥–ª—è –ø–∏—Ü—Ü–µ—Ä–∏–∏", callback_data='demo_pizza')],
        [InlineKeyboardButton("üíº –£—Å–ª—É–≥–∏ –∏ —Ü–µ–Ω—ã", callback_data='services')],
        [InlineKeyboardButton("üí¨ –û—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É", callback_data='leave_request')],
        [InlineKeyboardButton("üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã", callback_data='contacts')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.message.reply_text(
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –¥–µ–º–æ-–±–æ—Ç *Digital Agency*\n\n"
        "–Ø –ø–æ–∫–∞–∂—É –∫–∞–∫ —á–∞—Ç-–±–æ—Ç—ã –º–æ–≥—É—Ç –ø–æ–º–æ—á—å –≤–∞—à–µ–º—É –±–∏–∑–Ω–µ—Å—É:\n"
        "‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∑–∞–∫–∞–∑—ã 24/7\n"  
        "‚Ä¢ –£–≤–µ–ª–∏—á–∏—Ç—å –ø—Ä–æ–¥–∞–∂–∏ –Ω–∞ 15-30%\n"
        "‚Ä¢ –°–Ω–∏–∑–∏—Ç—å –Ω–∞–≥—Ä—É–∑–∫—É –Ω–∞ staff\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é:",
        reply_markup=reply_markup,
        parse_mode='Markdown'
    )

# ========== –û–ë–†–ê–ë–û–¢–ß–ò–ö –ö–ù–û–ü–û–ö ==========
async def button_handler(update: Update, context):
    query = update.callback_query
    await query.answer()
    
    if query.data == 'demo_pizza':
        await demo_pizza_bot(query)
    elif query.data == 'services':
        await show_services(query)
    elif query.data == 'leave_request':
        await start_leave_request(query)
    elif query.data == 'contacts':
        await show_contacts(query)
    elif query.data == 'back_to_main':
        await back_to_main(query)
    elif query.data == 'pizza_menu':
        await show_pizza_menu(query)
    elif query.data == 'pizza_order':
        await start_pizza_order(query)
    elif query.data == 'pizza_about':
        await pizza_about(query)

# ========== –î–ï–ú–û –ü–ò–¶–¶–ï–†–ò–Ø ==========
async def demo_pizza_bot(query):
    keyboard = [
        [InlineKeyboardButton("üçï –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –º–µ–Ω—é", callback_data='pizza_menu')],
        [InlineKeyboardButton("üõí –°–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑", callback_data='pizza_order')],
        [InlineKeyboardButton("‚ÑπÔ∏è –û –Ω–∞—Å", callback_data='pizza_about')],
        [InlineKeyboardButton("‚Ü©Ô∏è –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='back_to_main')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(
        "üçï *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –≤–∏—Ä—Ç—É–∞–ª—å–Ω—É—é –ø–∏—Ü—Ü–µ—Ä–∏—é!*\n\n"
        "–≠—Ç–æ –¥–µ–º–æ-–≤–µ—Ä—Å–∏—è –±–æ—Ç–∞ –¥–ª—è –ø—Ä–∏–µ–º–∞ –∑–∞–∫–∞–∑–æ–≤. "
        "–¢–∞–∫–æ–π –∂–µ –±–æ—Ç –º–æ–∂–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –¥–ª—è –≤–∞—à–µ–≥–æ –±–∏–∑–Ω–µ—Å–∞ 24/7!",
        reply_markup=reply_markup,
        parse_mode='Markdown'
    )

async def show_pizza_menu(query):
    menu_text = (
        "üçï *–ù–∞—à–µ –º–µ–Ω—é:*\n\n"
        "‚Ä¢ –ú–∞—Ä–≥–∞—Ä–∏—Ç–∞ - 450 —Ä—É–±.\n"
        "‚Ä¢ –ü–µ–ø–ø–µ—Ä–æ–Ω–∏ - 500 —Ä—É–±.\n" 
        "‚Ä¢ –ì–∞–≤–∞–π—Å–∫–∞—è - 550 —Ä—É–±.\n"
        "‚Ä¢ –ß–µ—Ç—ã—Ä–µ —Å—ã—Ä–∞ - 600 —Ä—É–±.\n\n"
        "_–≠—Ç–æ –¥–µ–º–æ-–º–µ–Ω—é. –í —Ä–µ–∞–ª—å–Ω–æ–º –±–æ—Ç–µ –≤—ã –º–æ–∂–µ—Ç–µ –ª–µ–≥–∫–æ –º–µ–Ω—è—Ç—å —Ü–µ–Ω—ã –∏ –∞—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç._"
    )
    
    keyboard = [
        [InlineKeyboardButton("üõí –°–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑", callback_data='pizza_order')],
        [InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data='demo_pizza')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(menu_text, reply_markup=reply_markup, parse_mode='Markdown')

async def start_pizza_order(query):
    await query.edit_message_text(
        "üéâ *–û—Ç–ª–∏—á–Ω–æ! –í—ã —É–≤–∏–¥–µ–ª–∏ –¥–µ–º–æ-–≤–µ—Ä—Å–∏—é!*\n\n"
        "–¢–∞–∫–æ–π –∂–µ –±–æ—Ç –¥–ª—è –≤–∞—à–µ–≥–æ –±–∏–∑–Ω–µ—Å–∞:\n"
        "‚Ä¢ –ë—É–¥–µ—Ç –ø—Ä–∏–Ω–∏–º–∞—Ç—å –∑–∞–∫–∞–∑—ã 24/7\n"
        "‚Ä¢ –°–Ω–∏–∑–∏—Ç –Ω–∞–≥—Ä—É–∑–∫—É –Ω–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤\n" 
        "‚Ä¢ –£–≤–µ–ª–∏—á–∏—Ç —Å—Ä–µ–¥–Ω–∏–π —á–µ–∫ –Ω–∞ 15-30%\n\n"
        "–•–æ—Ç–∏—Ç–µ —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å –¥–ª—è –≤–∞—à–µ–≥–æ –±–∏–∑–Ω–µ—Å–∞?",
        reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton("üí¨ –†–∞—Å—Å—á–∏—Ç–∞—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å", callback_data='leave_request')],
            [InlineKeyboardButton("üìû –°–≤—è–∑–∞—Ç—å—Å—è —Å–µ–π—á–∞—Å", callback_data='contacts')],
            [InlineKeyboardButton("‚Ü©Ô∏è –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='back_to_main')]
        ]),
        parse_mode='Markdown'
    )

async def pizza_about(query):
    await query.edit_message_text(
        "üè™ *–û –Ω–∞—à–µ–π –ø–∏—Ü—Ü–µ—Ä–∏–∏*\n\n"
        "–ú—ã —Ä–∞–±–æ—Ç–∞–µ–º —Å 2020 –≥–æ–¥–∞ –∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ "
        "–¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–æ–≤!\n\n"
        "–¢–∞–∫–æ–π –∂–µ –±–æ—Ç –º–æ–∂–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –∏ –¥–ª—è –≤–∞—à–µ–≥–æ –±–∏–∑–Ω–µ—Å–∞!",
        reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton("üí¨ –£–∑–Ω–∞—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å", callback_data='leave_request')],
            [InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data='demo_pizza')]
        ]),
        parse_mode='Markdown'
    )

# ========== –£–°–õ–£–ì–ò –ò –¶–ï–ù–´ ==========
async def show_services(query):
    services_text = (
        "üíº *–ù–∞—à–∏ —É—Å–ª—É–≥–∏:*\n\n"
        "ü§ñ *–ß–∞—Ç-–±–æ—Ç—ã –¥–ª—è –±–∏–∑–Ω–µ—Å–∞*\n"
        "‚Ä¢ –ü—Ä–∏–µ–º –∑–∞–∫–∞–∑–æ–≤ –∏ –∑–∞–ø–∏—Å–µ–π\n"
        "‚Ä¢ –ê–≤—Ç–æ–æ—Ç–≤–µ—Ç—á–∏–∫ –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã\n"
        "‚Ä¢ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å CRM\n\n"
        "üí∞ *–°—Ç–æ–∏–º–æ—Å—Ç—å:*\n"
        "‚Ä¢ –û—Ç 15 000 —Ä—É–±. –∑–∞ –≥–æ—Ç–æ–≤–æ–≥–æ –±–æ—Ç–∞\n"
        "‚Ä¢ –°—Ä–æ–∫: 5-7 –¥–Ω–µ–π\n\n"
        "üìã *–ß—Ç–æ –≤—Ö–æ–¥–∏—Ç:*\n"
        "‚Ä¢ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏ –∑–∞–ø—É—Å–∫\n"
        "‚Ä¢ –û–±—É—á–µ–Ω–∏–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é\n" 
        "‚Ä¢ –ü–æ–¥–¥–µ—Ä–∂–∫–∞ 1 –º–µ—Å—è—Ü\n\n"
        "_*–ë–µ—Å–ø–ª–∞—Ç–Ω–∞—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è –∏ –¥–µ–º–æ!*_"
    )
    
    keyboard = [
        [InlineKeyboardButton("üí¨ –û—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É", callback_data='leave_request')],
        [InlineKeyboardButton("üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã", callback_data='contacts')],
        [InlineKeyboardButton("‚Ü©Ô∏è –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='back_to_main')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(services_text, reply_markup=reply_markup, parse_mode='Markdown')

# ========== –°–ë–û–† –ó–ê–Ø–í–û–ö ==========
async def start_leave_request(query):
    await query.edit_message_text(
        "üìù *–û—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É*\n\n"
        "–û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ 4 –ø—Ä–æ—Å—Ç—ã—Ö –≤–æ–ø—Ä–æ—Å–∞ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ —Å—Ç–æ–∏–º–æ—Å—Ç–∏:\n\n"
        "*–í–æ–ø—Ä–æ—Å 1/4:*\n–ö–∞–∫ –Ω–∞–∑—ã–≤–∞–µ—Ç—Å—è –≤–∞—à –±–∏–∑–Ω–µ—Å?",
        parse_mode='Markdown'
    )
    return BUSINESS_NAME

async def get_business_name(update: Update, context):
    context.user_data['business_name'] = update.message.text
    await update.message.reply_text(
        "*–í–æ–ø—Ä–æ—Å 2/4:*\n–ö–∞–∫–∞—è —É –≤–∞—Å —Å—Ñ–µ—Ä–∞? (—Ä–µ—Å—Ç–æ—Ä–∞–Ω, —Å–∞–ª–æ–Ω –∫—Ä–∞—Å–æ—Ç—ã, –¥–æ—Å—Ç–∞–≤–∫–∞...)",
        parse_mode='Markdown'
    )
    return BUSINESS_TYPE

async def get_business_type(update: Update, context):
    context.user_data['business_type'] = update.message.text
    await update.message.reply_text(
        "*–í–æ–ø—Ä–æ—Å 3/4:*\n–ß—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞—Ç—å? (–ø—Ä–∏–µ–º –∑–∞–∫–∞–∑–æ–≤, –∑–∞–ø–∏—Å—å –∫–ª–∏–µ–Ω—Ç–æ–≤...)",
        parse_mode='Markdown'
    )
    return AUTOMATION_GOAL

async def get_automation_goal(update: Update, context):
    context.user_data['automation_goal'] = update.message.text
    await update.message.reply_text(
        "*–í–æ–ø—Ä–æ—Å 4/4:*\n–í–∞—à –Ω–æ–º–µ—Ä Telegram –¥–ª—è —Å–≤—è–∑–∏?",
        parse_mode='Markdown'
    )
    return CONTACT_INFO

async def get_contact_info(update: Update, context):
    context.user_data['contact_info'] = update.message.text
    user_data = context.user_data
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞—è–≤–∫—É
    application_text = (
        "üéâ *–ù–û–í–ê–Ø –ó–ê–Ø–í–ö–ê!*\n\n"
        f"*–ë–∏–∑–Ω–µ—Å:* {user_data['business_name']}\n"
        f"*–°—Ñ–µ—Ä–∞:* {user_data['business_type']}\n"
        f"*–ó–∞–¥–∞—á–∞:* {user_data['automation_goal']}\n"
        f"*–ö–æ–Ω—Ç–∞–∫—Ç—ã:* {user_data['contact_info']}\n\n"
        "_–ù–µ –∑–∞–±—É–¥—å—Ç–µ —Å–≤—è–∑–∞—Ç—å—Å—è —Å –∫–ª–∏–µ–Ω—Ç–æ–º!_"
    )
    
    # –ó–¥–µ—Å—å –±–æ—Ç –æ—Ç–ø—Ä–∞–≤–∏—Ç –∑–∞—è–≤–∫—É –≤–∞–º –≤ –ª–∏—á–∫—É
    # –ü–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ –≤—ã–≤–æ–¥–∏–º –≤ –∫–æ–Ω—Å–æ–ª—å
    print("="*50)
    print("–ù–û–í–ê–Ø –ó–ê–Ø–í–ö–ê:")
    print(f"–ë–∏–∑–Ω–µ—Å: {user_data['business_name']}")
    print(f"–°—Ñ–µ—Ä–∞: {user_data['business_type']}") 
    print(f"–ó–∞–¥–∞—á–∞: {user_data['automation_goal']}")
    print(f"–ö–æ–Ω—Ç–∞–∫—Ç—ã: {user_data['contact_info']}")
    print("="*50)
    
    await update.message.reply_text(
        "‚úÖ *–°–ø–∞—Å–∏–±–æ! –ó–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞!*\n\n"
        "–ù–∞—à –º–µ–Ω–µ–¥–∂–µ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –≤ —Ç–µ—á–µ–Ω–∏–µ 2 —á–∞—Å–æ–≤ –¥–ª—è –±–µ—Å–ø–ª–∞—Ç–Ω–æ–π –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ "
        "–∏ —Ä–∞—Å—á–µ—Ç–∞ —Ç–æ—á–Ω–æ–π —Å—Ç–æ–∏–º–æ—Å—Ç–∏.\n\n"
        "–ê –ø–æ–∫–∞ –ø–æ—Å–º–æ—Ç—Ä–∏—Ç–µ –¥–µ–º–æ-–≤–µ—Ä—Å–∏–∏ –±–æ—Ç–æ–≤ üëá",
        reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton("ü§ñ –î–µ–º–æ-–±–æ—Ç—ã", callback_data='demo_pizza')],
            [InlineKeyboardButton("üìû –°–≤—è–∑–∞—Ç—å—Å—è —Å–µ–π—á–∞—Å", callback_data='contacts')]
        ]),
        parse_mode='Markdown'
    )
    return ConversationHandler.END

# ========== –ö–û–ù–¢–ê–ö–¢–´ ==========
async def show_contacts(query):
    await query.edit_message_text(
        "üìû *–ö–æ–Ω—Ç–∞–∫—Ç—ã*\n\n"
        "üí¨ *Telegram:* @your_username\n"
        "üì± *–¢–µ–ª–µ—Ñ–æ–Ω:* +7 (XXX) XXX-XX-XX\n"
        "üïê *–í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã:* 9:00-21:00\n\n"
        "üí° *–ë–µ—Å–ø–ª–∞—Ç–Ω–∞—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è* - –æ—Ç–≤–µ—Ç–∏–º –Ω–∞ –≤—Å–µ –≤–æ–ø—Ä–æ—Å—ã!",
        reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton("üí¨ –û—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É", callback_data='leave_request')],
            [InlineKeyboardButton("‚Ü©Ô∏è –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='back_to_main')]
        ]),
        parse_mode='Markdown'
    )

# ========== –ù–ê–ó–ê–î –í –ì–õ–ê–í–ù–û–ï –ú–ï–ù–Æ ==========
async def back_to_main(query):
    keyboard = [
        [InlineKeyboardButton("ü§ñ –î–µ–º–æ-–±–æ—Ç –¥–ª—è –ø–∏—Ü—Ü–µ—Ä–∏–∏", callback_data='demo_pizza')],
        [InlineKeyboardButton("üíº –£—Å–ª—É–≥–∏ –∏ —Ü–µ–Ω—ã", callback_data='services')],
        [InlineKeyboardButton("üí¨ –û—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É", callback_data='leave_request')],
        [InlineKeyboardButton("üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã", callback_data='contacts')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(
        "üëã –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é. –í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é:",
        reply_markup=reply_markup
    )

async def cancel(update: Update, context):
    await update.message.reply_text('–î–∏–∞–ª–æ–≥ –ø—Ä–µ—Ä–≤–∞–Ω. –ù–∞–ø–∏—à–∏—Ç–µ /start —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ.')
    return ConversationHandler.END

def main():
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    application = Application.builder().token(os.getenv('BOT_TOKEN')).build()
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CallbackQueryHandler(button_handler))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–∏–∞–ª–æ–≥–∞ –¥–ª—è –∑–∞—è–≤–æ–∫
    conv_handler = ConversationHandler(
        entry_points=[CallbackQueryHandler(start_leave_request, pattern='^leave_request$')],
        states={
            BUSINESS_NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_business_name)],
            BUSINESS_TYPE: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_business_type)],
            AUTOMATION_GOAL: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_automation_goal)],
            CONTACT_INFO: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_contact_info)],
        },
        fallbacks=[CommandHandler('cancel', cancel)]
    )
    application.add_handler(conv_handler)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    application.run_polling()

if __name__ == '__main__':
    main()